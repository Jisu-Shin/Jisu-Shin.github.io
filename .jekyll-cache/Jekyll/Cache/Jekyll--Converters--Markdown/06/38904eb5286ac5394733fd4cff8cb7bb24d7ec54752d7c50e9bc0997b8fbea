I"m6<h1 id="순서">순서</h1>

<ol>
  <li><a href="#정렬알고리즘">정렬알고리즘</a></li>
  <li><a href="#탐색알고리즘">탐색알고리즘</a></li>
  <li><a href="#추가알고리즘">추가알고리즘</a>
<br />
<br /></li>
</ol>

<h1 id="정렬알고리즘">정렬알고리즘</h1>

<ol>
  <li>삽입정렬 (삽입법)</li>
  <li>셸정렬 (삽입법)</li>
  <li>선택정렬 (교환법)</li>
  <li>버블정렬 (교환법)</li>
  <li>퀵정렬 (교환법)</li>
  <li>힙정렬 (선택법)</li>
  <li>병합정렬 (병합법)</li>
</ol>

<p><br /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Name</th>
      <th>Best</th>
      <th>AVG</th>
      <th>Worst</th>
      <th>안정</th>
      <th>메모리</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">삽입정렬</td>
      <td>O(n)</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>O</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td style="text-align: left">선택정렬</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>X</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td style="text-align: left">버블정렬</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>O</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td style="text-align: left">셸 정렬</td>
      <td>O(n)</td>
      <td>O(n^1.5)</td>
      <td>O(n^2)</td>
      <td>X</td>
      <td> </td>
    </tr>
    <tr>
      <td style="text-align: left">퀵 정렬</td>
      <td>O(nlogn)</td>
      <td>O(nlogn)</td>
      <td>O(n^2)</td>
      <td>X</td>
      <td>O(logn)</td>
    </tr>
    <tr>
      <td style="text-align: left">힙 정렬</td>
      <td>O(nlogn)</td>
      <td>O(nlogn)</td>
      <td>O(nlogn)</td>
      <td>X</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td style="text-align: left">병합정렬</td>
      <td>O(nlogn)</td>
      <td>O(nlogn)</td>
      <td>O(nlogn)</td>
      <td>O</td>
      <td>O(n)</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="삽입정렬">삽입정렬</h2>

<p>Insertion Sort</p>

<p><img src="https://t1.daumcdn.net/cfile/tistory/991371375C3DF2252C" alt="img" /></p>

<p><code class="language-plaintext highlighter-rouge">2번째 원소(key)부터 시작하여 그 앞(왼쪽)의 원소들과 비교하여 삽입할 위치를 지정한 후, 원소를 뒤로 옮기고 지정된 자리에 자료를 삽입하여 정렬하는 알고리즘</code></p>

<p>(key값이 앞 자리로 교체할 때마다 1회전 증가)</p>

<h6 id="장점">장점</h6>

<ul>
  <li>알고리즘이 단순하여 구현이 쉽다</li>
  <li>정렬하고자 하는 배열 안에서 교환하는 방식으로 다른 메모리 공간을 필요로 하지 않는다 (제자리 정렬: in-place sorting)</li>
  <li>안정 정렬(Stable Sort)이다</li>
</ul>

<h6 id="단점">단점</h6>

<ul>
  <li>평균과 최악의 시간복잡도를 보아 배열의 길이가 길어질수록 비효율적이다 
<br /></li>
</ul>

<p><a href="#정렬알고리즘">정렬알고리즘</a>
<br /></p>
<hr />
<p><br /></p>

<h2 id="선택정렬">선택정렬</h2>

<p>Selection Sort</p>

<p><img src="https://t1.daumcdn.net/cfile/tistory/99165F455C3F12D907" alt="img" /></p>

<p><code class="language-plaintext highlighter-rouge">해당 자리(key)로 옮길 원소를 뒤(오른쪽)에서부터 끝까지 탐색하면서 가장 작은 값을 찾아 교환하는 알고리즘</code></p>

<p>(key값이 고정될 경우 1회전 증가) —-&gt; 이래서 최선도 O(n^2) 인듯…?</p>

<h6 id="장점-1">장점</h6>

<ul>
  <li>알고리즘이 단순하여 구현이 쉽다</li>
  <li>비교 횟수는 많지만 , Bubble Sort에 비해 실제로 교환하는 횟수는 적기 때문에 많은 교환이 일어나야 하는 자료상태에서 비교적 효율적이다</li>
  <li>정렬하고자 하는 배열 안에서 교환하는 방식으로 다른 메모리 공간을 필요로 하지 않는다(제자리 정렬:in-place sorting)</li>
</ul>

<h6 id="단점-1">단점</h6>

<ul>
  <li>
    <p>매번 끝까지 탐색하면서 비교하므로 최선,평균,최악 O(n^2)로 비효율적이다</p>
  </li>
  <li>
    <p>불안정 정렬(Unstable Sort) 이다</p>
  </li>
</ul>

<p><a href="#정렬알고리즘">정렬알고리즘</a></p>

<h2 id="버블정렬">버블정렬</h2>

<p>Bubble Sort</p>

<p><img src="https://t1.daumcdn.net/cfile/tistory/991A93465C38380319" alt="img" /></p>

<p><code class="language-plaintext highlighter-rouge">서로 인접한 두 원소를 비교하고 조건에 맞지 않는다면 자리를 교환하며 정렬하는 알고리즘</code></p>

<p>(인접한 두 원소를 비교하여 교환하는게 배열 끝까지 갔을 경우 1회전증가)</p>

<h6 id="장점-2">장점</h6>

<ul>
  <li>알고리즘이 단순하여 구현이 쉽다</li>
  <li>정렬하고자 하는 배열 안에서 교환하는 방식으로 다른 메모리 공간을 필요로 하지 않는다(제자리 정렬:in-place sorting)</li>
</ul>

<h6 id="단점-2">단점</h6>

<ul>
  <li>매번 끝까지 탐색하면서 비교하므로 최선,평균,최악 O(n^2)로 비효율적이다</li>
  <li>교환연산이 많이 이뤄진다</li>
</ul>

<p><a href="#정렬알고리즘">정렬알고리즘</a></p>

<h2 id="퀵정렬">퀵정렬</h2>

<p>Quick Sort</p>

<p><img src="https://gmlwjd9405.github.io/images/algorithm-quick-sort/quick-sort.png" width="70%" /></p>

<p><code class="language-plaintext highlighter-rouge">전체를 분할기준(pivot)보다 작은 구간, 큰 구간으로 나누는 작업을 재귀적으로 수행하여 정렬하는 알고리즘</code></p>

<p>(pivot을 기준으로 쪼개졌을경우 1회전 증가)</p>

<p>① pivot을 정한다 (random, 첫번째, 중간, 마지막 … )</p>

<p>② (위치변수) left ++ , right– 하면서 left에다가는 pivot보다 큰 수의 위치, right에다가는 분할기준(pivot)보다 작은 수의 위치를 저장하고 교체한다</p>

<p>③ right이 left 와 같거나 작을 경우 right이 pivot보다 작을경우 값을 변경해준다</p>

<p>④ right 위치가 pivot이 되고 분할되어 반복한다</p>

<h6 id="장점-3">장점</h6>

<ul>
  <li><strong>logn</strong>만큼 분할하고 분할마다 최대 <strong>n</strong>번 데이터 비교가 발생하므로 시간복잡도가 O(nlogn) 이므로 속도가 빠르다</li>
  <li>정렬하고자 하는 배열 안에서 교환하는 방식으로 다른 메모리 공간을 필요로 하지 않는다(제자리 정렬:in-place sorting)</li>
</ul>

<h6 id="단점-3">단점</h6>

<ul>
  <li>최악의 경우 : pivot이 매번 제일 크거나 작은 값을 선택될 때 , 이미 정렬된 데이터에 대해서 퀵 정렬을 수행할 때 (해결하기 위해 중간값을 pivot으로 선택한다)</li>
  <li>불안정 정렬(Unstable Sort) 이다</li>
</ul>

<p><br /></p>

<p><a href="#정렬알고리즘">정렬알고리즘</a></p>

<p><br /></p>
<hr />
<p><br /></p>

<h2 id="힙정렬">힙정렬</h2>

<p>Heap Sort</p>

<p><img src="https://cdn.filepicker.io/api/file/mk9pbXCmTM2uXS8BXUQP" alt="Algorithm) 자료구조(힙, Heap), 힙 정렬, Heap sort - ZeroCho Blog" /></p>

<p><code class="language-plaintext highlighter-rouge">완전 이진 트리 형태로 최대힙일 경우에는 내림차순으로, 최소힙일 경우에는 오름차순으로 정렬하는 알고리즘</code></p>

<p><strong>최대힙</strong>일 경우 부모노드 &gt;= 자식노드 @@@  <strong>최소힙</strong>일 경우 부모노드 &lt;=자식노드</p>

<p>인덱스가 0부터 시작한다고 가정할 경우 :: 부모노드(n)일 경우 왼쪽자식노드(2<em>n+1) , 오른쪽자식노드(2</em>n+2)</p>

<p>[최대힙일 경우 정렬방법]</p>

<p>① root값을 빼준다</p>

<p>② 힙의 마지막 노드를 root로 올린다</p>

<p>③ 자식노드와 비교하며 큰 값을 부모노드로 교환한다</p>

<p>④ 모든 노드가 빠질 때까지 반복한다</p>

<p><a href="https://visualgo.net/en/heap">heap sort 시뮬레이션 참고</a></p>

<h6 id="장점-4">장점</h6>

<ul>
  <li>전체 자료를 정렬하는 것이 아니라 가장 크거나 작은 값 몇개만 필요할 경우 유용하다</li>
</ul>

<h6 id="단점-4">단점</h6>

<ul>
  <li>불안정 정렬(Unstable Sort) 이다</li>
</ul>

<p><br /></p>

<p><a href="#정렬알고리즘">정렬알고리즘</a></p>

<p><br /></p>
<hr />
<p><br /></p>

<h2 id="병합정렬">병합정렬</h2>

<p>Merge Sort</p>

<p><img src="https://gmlwjd9405.github.io/images/algorithm-merge-sort/merge-sort-concepts.png" alt="img" /></p>

<p><code class="language-plaintext highlighter-rouge">원소를 하나일 때까지 절반씩 쪼갠 후 다시 합병시키면서 정렬하는 알고리즘</code></p>

<p>(인접한 두 원소를 비교하여 교환하는게 배열 끝까지 갔을 경우 1회전증가)</p>

<h6 id="장점-5">장점</h6>

<ul>
  <li>
    <p>안정 정렬로 입력 데이터가 무엇이든 간에 정렬되는 시간은 동일하다</p>
  </li>
  <li>
    <p>데이터셋을 연결리스트로 구현하면 링크 인덱스만 변경하면 되므로 제자리 정렬로 구현할 수 있다</p>
  </li>
</ul>

<h6 id="단점-5">단점</h6>

<ul>
  <li>거대한 데이터 셋일 경우 이동횟수가 많아지므로 매우 큰 시간적 낭비를 초래한다</li>
  <li>제자리 정렬이 아니다</li>
  <li>정렬 결과를 저장할 배열을 새로 만들고, 이를 기존에 배열에 복사하므로 거대한 데이터 셋에서 치명적이다</li>
</ul>

<p><a href="#정렬알고리즘">정렬알고리즘</a></p>

<h3 id="추가-안정정렬불안정정렬">(추가) 안정정렬,불안정정렬</h3>

<p><img src="https://t1.daumcdn.net/cfile/tistory/999C2A4D5C4858952C" alt="img" /></p>

<p>안정정렬: 동일한 값에 기존 순서가 유지</p>

<p>불안정정렬: 동일한 값에 기존 순서가 유지하지 않는다</p>

<hr />

<h1 id="탐색알고리즘">탐색알고리즘</h1>

<ol>
  <li>선형탐색</li>
  <li>이진탐색</li>
  <li>해시탐색</li>
  <li>이진탐색트리</li>
</ol>

<h2 id="선형탐색">선형탐색</h2>

<p>Linear Search</p>

<p><code class="language-plaintext highlighter-rouge">맨 앞이나, 맨 뒤에서부터 순서대로 하나씩 찾아보는 알고리즘</code></p>

<h6 id="장점-6">장점</h6>

<ul>
  <li>단순하고 이해하기 쉽고 구현하기 쉽다</li>
</ul>

<h6 id="단점-6">단점</h6>

<ul>
  <li>데이터 수에 따라 시간이 늘어나므로 비효율적이다</li>
</ul>

<p><strong>시간복잡도 : O(n)</strong></p>

<p>최선인 경우 : 리스트의 첫 번째 원소가 정답인 경우 O(1)</p>

<p>최악의 경우 : 리스트의 맨 마지막 원소이거나 찾는 값이 없을 경우 O(n)</p>

<p><a href="#탐색알고리즘">탐색알고리즘</a></p>

<h2 id="이진탐색">이진탐색</h2>

<p>Binary Search</p>

<p><code class="language-plaintext highlighter-rouge">탐색 대상인 데이터가 미리 정렬되어 있을 경우 사용할 수 있다. 가운데 요소보다 큰지 작은지 조건에 맞춰 탐색범위를 점점 좁힌다</code></p>

<h6 id="장점-7">장점</h6>

<ul>
  <li>선형탐색은 n이 증가함에 따라 시간복잡도가 선형적으로 증가하지만 , 이진탐색은 n이 증가해도 비교적 천천히 증가한다</li>
</ul>

<h6 id="단점-7">단점</h6>

<p><strong>시간복잡도 O(logn)</strong></p>

<p>최선인 경우 : 리스트의 가운데 요소일 경우 O(1)</p>

<p>최악의 경우 : 리스트에 찾는 값이 없을 경우 O(logn)</p>

<p><a href="#탐색알고리즘">탐색알고리즘</a></p>

<h2 id="해시탐색">해시탐색</h2>

<p>Hash Search</p>

<p><code class="language-plaintext highlighter-rouge">index와 그에 해당하는 값을 연결해 둠으로써 짧은 시간에 탐색할 수 있는 알고리즘</code></p>

<p>해시값 : 데이터를 넣을 index 번호 (=데이터 % 배열크기)</p>

<h6 id="장점-8">장점</h6>

<ul>
  <li>데이터를 저장하거나, 탐색하고자 하는 위치를 <strong>즉시</strong> 참조할 수 있기 때문에 빠른 속도로 처리가 가능하다</li>
  <li>효율적으로 배열을 사용할 수 있다</li>
</ul>

<h6 id="단점-8">단점</h6>

<p><a href="#탐색알고리즘">탐색알고리즘</a></p>

<h2 id="이진탐색트리">이진탐색트리</h2>

<p>BST : Binary Search Tree</p>

<p><code class="language-plaintext highlighter-rouge">모든 노드의 키가 유일한 트리 자료구조를 이용해 탐색하는 알고리즘</code></p>

<p>원하는 값 &gt; root 값 : 오른쪽 서브트리로 이동</p>

<p>원하는 값 &lt; root 값 : 왼쪽 서브트리로 이동</p>

<p>원하는값 = root 값 : 탐색 종료</p>

<h6 id="장점-9">장점</h6>

<ul>
  <li></li>
</ul>

<h6 id="단점-9">단점</h6>

<p><a href="#탐색알고리즘">탐색알고리즘</a></p>

<p><a href="#순서">순서</a></p>

<h1 id="추가알고리즘">추가알고리즘</h1>

<ul>
  <li>분할정복 알고리즘</li>
  <li>그래프 알고리즘 (dfs,bfs,다익스트라,플로이드와샬)</li>
</ul>

<p><a href="#순서">순서</a></p>

<h1 id="시간복잡도">시간복잡도</h1>

<p>참조지역성 원리를 얼마나 잘 만족하는가</p>

<h1 id="reference">Reference</h1>

<p><a href="https://gmlwjd9405.github.io/2018/05/10/algorithm-quick-sort.html">https://gmlwjd9405.github.io/2018/05/10/algorithm-quick-sort.html</a></p>

<p><a href="https://bba-dda.tistory.com/entry/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%83%90%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%84%A0%ED%98%95-%EC%9D%B4%EB%B6%84-%ED%95%B4%EC%8B%9C-BST"> 탐색알고리즘 https://bba-dda.tistory.com/entry/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%83%90%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%84%A0%ED%98%95-%EC%9D%B4%EB%B6%84-%ED%95%B4%EC%8B%9C-BST</a></p>

:ET